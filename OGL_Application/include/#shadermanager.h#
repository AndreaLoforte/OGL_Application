#ifndef SHADER_MAN
#define SHADER_MAN
#include<shaders.h>
#include<map>
#include<string>
#include<initializer_list>



namespace shaderManagerNS{

  class ShaderManager{
   std::map<std::string,shaderNS::Shader> vshadersMAP;
    std::map<std::string,shaderNS::Shader> fshadersMAP;    
    

    ShaderManager();//NO DEFAULT CONSTRUCTOR
    ShaderManager(ShaderManager const &);//NO COPY CONSTRUCTOR
  public:
    
    ShaderManager(std::initializer_list<std::string> vs_list,
		  std::initializer_list<std::string> fs_list)
      {
	for(const std::string sPath : vs_list)
	    setVShader(sPath);
	for(const std::string sPath : fs_list)
	  setFShader(sPath);
      }
    
    const char** getShaderSource(std::string);    
    const char** getVShaderSource(int);
    const char** getFShaderSource(int);
    

    inline shaderNS::Shader getShader(std::string shpath)
    {
      std::map<std::string,shaderNS::Shader>::iterator it =
	vshadersMAP.find(shpath);
      if(it == vshadersMAP.end())
	it = fshadersMAP.find(shpath);
      else
	return it->second;
      if(it == fshadersMAP.end())
	std::cout<<"shadermanager.h::getShader() : could not find "<<shpath<<std::endl;
      else 
	return it->second;
    }
    
    inline void setVShader(std::string shPath)
    {
      shaderNS::Shader sh(shPath);
      vshadersMAP.insert({shPath,sh});
    }

    inline void setFShader(std::string shPath)
    {x
      shaderNS::Shader sh(shPath);
      fshadersMAP.insert({shPath,sh});
    }

    
    shaderNS::Shader unifyShaders(shaderNS::Shader *, int);
  };

}//namespace

#endif
